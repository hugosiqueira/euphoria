<?php

namespace Source\Models;

class RolePermission extends \Source\Core\Model
{

    /**
     *
     */
    public function __construct()
    {
        parent::__construct("roles_permissions", ["id"], ["roles_id", "widgets_id", "can_view", "can_add", "can_edit", "can_delete"]);
    }

    /**
     * @param integer $roles_id
     * @param integer $widgets_id
     * @param integer $can_view
     * @param integer $can_add
     * @param integer $can_edit
     * @param integer $can_delete
     * @return RolePermission
     */
    public function bootstrap(
        int $roles_id,
        int $widgets_id,
        int $can_view,
        int $can_add,
        int $can_edit,
        int $can_delete

    ): RolePermission {
        $this->roles_id = $roles_id;
        $this->widgets_id = $widgets_id;
        $this->can_view = $can_view;
        $this->can_add = $can_add;
        $this->can_edit = $can_edit;
        $this->can_delete = $can_delete;
        return $this;
    }
    /**
     * @param integer $widgets_id
     * @param integer $roles_id
     * @param string $columns
     * @return null|RolePermission
     */
    public function findByWidget(int $widgets_id,int $roles_id, string $columns = "*"): ?RolePermission
    {
        $find = $this->find("widgets_id = :widgets_id, roles_id= :roles_id", "widgets_id={$widgets_id}&roles_id={$roles_id}", $columns);
        return $find->fetch();
    }


    /**
     * @param int $roles_id
     * @param string $columns
     * @return RolePermission|mixed
     */
    public function findByRole(int $roles_id, string $columns = "*")
    {
        $find = $this->find("roles_id= :roles_id", "roles_id={$roles_id}", $columns);
        return $find->fetch("true");
    }

    /**
     * @return bool
     */
    public function save(): bool
    {

        /** RolePermission Update */
        if (!empty($this->id)) {
            $rolePermissionId = $this->id;

            if ($this->find("widgets_id = :w AND roles_id = :u AND id != :i", "w={$this->widgets_id}&u={$this->roles_id}&i={$rolePermissionId}", "id")->fetch()) {
                $this->message->warning("As permissões do módulo já estão cadastradas");
                return false;
            }

            $this->update($this->safe(), "id = :id", "id={$rolePermissionId}");
            if ($this->fail()) {
                $this->message->error("Erro ao atualizar, verifique os dados");
                return false;
            }
        }

        /** Role Create */
        if (empty($this->id)) {
            if ($this->findByWidget($this->widgets_id, $this->roles_id, "id")) {
                $this->message->warning("As permissões do módulo já estão cadastradas");
                return false;
            }

            $rolePermissionId = $this->create($this->safe());
            if ($this->fail()) {
                $this->message->error("Erro ao cadastrar, verifique os dados");
                return false;
            }
        }

        $this->data = ($this->findById($rolePermissionId))->data();
        return true;
    }

    /**
     * @param string $terms
     * @param string|null $params
     * @return bool
     */
    public function delete(string $terms, ?string $params): bool
    {
        return parent::delete($terms, $params); // TODO: Change the autogenerated stub
    }

}